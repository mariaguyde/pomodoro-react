{"ast":null,"code":"var _jsxFileName = \"/Users/guydefontgalland/PhpstormProjects/pomodoro/src/index.js\";\n\n/*import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();*/\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  textAlign: \"center\"\n};\nconst stylesAlert = {\n  backgroundColor: \"red\"\n};\n/*function Demo (props) {\n    return (\n        <div styles={styles}>\n            <h1>Aloha n {props.count}</h1>\n        </div>\n    )\n}*/\n\nlet stopTimerStatus = 0;\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 25,\n      mode: \"MODE PAUSE : Have break, have a KitKat ! \",\n      red: \"\"\n    };\n  }\n\n  compte() {\n    if (stopTimerStatus === 0) {\n      this.setState({\n        count: this.state.count - 1\n      });\n\n      if (this.state.count < 20 && this.state.count !== 0 && this.state.count > 0) {\n        console.log(\"red\");\n        this.state.red = \"Plus que 20 secondes et c'est bientôt l'heure de la pause !\";\n      } else if (this.state.count <= 0) {\n        console.log('alert');\n        this.state.mode = \"MODE PAUSE : Have break, have a KitKat ! \";\n        this.state.red = \"\";\n        stopTimerStatus = 1; // à faire : lancer un nouveau timer et les classes CSS\n      }\n    } else if (stopTimerStatus === 1) {\n      console.log(\"timer à recommencer\");\n    }\n  }\n\n  timer() {\n    console.log(stopTimerStatus);\n    this.state.mode = \"MODE TRAVAIL : Au boulot ! \";\n    const intervalTimer = setInterval(this.compte.bind(this), 1000);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"- POMODORO -\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.timer.bind(this),\n          children: \" Lancer un timer \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.mode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.red\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Timer :  \", this.state.count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nlet count = 1;\nlet text = \"welcome 2\";\nconst rootElt = document.getElementById(\"root\");\nrender( /*#__PURE__*/_jsxDEV(Demo, {\n  count: count,\n  text: text\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 97,\n  columnNumber: 9\n}, this), rootElt);","map":{"version":3,"sources":["/Users/guydefontgalland/PhpstormProjects/pomodoro/src/index.js"],"names":["React","render","styles","textAlign","stylesAlert","backgroundColor","stopTimerStatus","Demo","Component","constructor","props","state","count","mode","red","compte","setState","console","log","timer","intervalTimer","setInterval","bind","text","rootElt","document","getElementById"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,QAAqB,WAArB;;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,SAAS,EAAE;AADA,CAAf;AAIA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,eAAe,EAAE;AADD,CAApB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,eAAe,GAAG,CAAtB;;AAEA,MAAMC,IAAN,SAAmBP,KAAK,CAACQ,SAAzB,CAAmC;AAE/BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,KAAK,EAAC,EAAP;AAAWC,MAAAA,IAAI,EAAC,2CAAhB;AAA6DC,MAAAA,GAAG,EAAC;AAAjE,KAAb;AACH;;AAEDC,EAAAA,MAAM,GAAG;AAEL,QAAIT,eAAe,KAAK,CAAxB,EAA2B;AACvB,WAAKU,QAAL,CAAc;AAACJ,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,GAAmB;AAA3B,OAAd;;AAEA,UAAI,KAAKD,KAAL,CAAWC,KAAX,GAAmB,EAAnB,IAAyB,KAAKD,KAAL,CAAWC,KAAX,KAAqB,CAA9C,IAAmD,KAAKD,KAAL,CAAWC,KAAX,GAAmB,CAA1E,EAA6E;AACzEK,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACA,aAAKP,KAAL,CAAWG,GAAX,GAAiB,6DAAjB;AACH,OAHD,MAIK,IAAI,KAAKH,KAAL,CAAWC,KAAX,IAAoB,CAAxB,EAA2B;AAC5BK,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,aAAKP,KAAL,CAAWE,IAAX,GAAkB,2CAAlB;AACA,aAAKF,KAAL,CAAWG,GAAX,GAAgB,EAAhB;AACAR,QAAAA,eAAe,GAAG,CAAlB,CAJ4B,CAK5B;AACH;AACJ,KAdD,MAeK,IAAIA,eAAe,KAAK,CAAxB,EAA2B;AAC5BW,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACH;AACJ;;AAEDC,EAAAA,KAAK,GAAG;AACJF,IAAAA,OAAO,CAACC,GAAR,CAAYZ,eAAZ;AACI,SAAKK,KAAL,CAAWE,IAAX,GAAkB,6BAAlB;AACA,UAAMO,aAAa,GAAGC,WAAW,CAAC,KAAKN,MAAL,CAAYO,IAAZ,CAAiB,IAAjB,CAAD,EAAyB,IAAzB,CAAjC;AAEP;;AAEDrB,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,KAAK,EAAEC,MAAZ;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,+BACI;AAAQ,UAAA,OAAO,EAAE,KAAKiB,KAAL,CAAWG,IAAX,CAAgB,IAAhB,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFJ,eAKI;AAAA,kBAAI,KAAKX,KAAL,CAAWE;AAAf;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI;AAAA,kBAAI,KAAKF,KAAL,CAAWG;AAAf;AAAA;AAAA;AAAA;AAAA,cANJ,eAOI;AAAA,gCAAa,KAAKH,KAAL,CAAWC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH;;AAhD8B;;AAmDnC,IAAIA,KAAK,GAAG,CAAZ;AACA,IAAIW,IAAI,GAAG,WAAX;AACA,MAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAhB;AACAzB,MAAM,eAAE,QAAC,IAAD;AAAM,EAAA,KAAK,EAAEW,KAAb;AAAoB,EAAA,IAAI,EAAEW;AAA1B;AAAA;AAAA;AAAA;AAAA,QAAF,EAAqCC,OAArC,CAAN","sourcesContent":["/*import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();*/\n\n\n\n\nimport React from 'react';\nimport {render} from 'react-dom';\n\nconst styles = {\n    textAlign: \"center\"\n}\n\nconst stylesAlert = {\n    backgroundColor: \"red\"\n}\n\n/*function Demo (props) {\n    return (\n        <div styles={styles}>\n            <h1>Aloha n {props.count}</h1>\n        </div>\n    )\n}*/\n\nlet stopTimerStatus = 0;\n\nclass Demo extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {count:25, mode:\"MODE PAUSE : Have break, have a KitKat ! \", red:\"\"};\n    }\n\n    compte() {\n\n        if (stopTimerStatus === 0) {\n            this.setState({count: this.state.count - 1})\n\n            if (this.state.count < 20 && this.state.count !== 0 && this.state.count > 0) {\n                console.log(\"red\");\n                this.state.red = \"Plus que 20 secondes et c'est bientôt l'heure de la pause !\";\n            }\n            else if (this.state.count <= 0) {\n                console.log('alert');\n                this.state.mode = \"MODE PAUSE : Have break, have a KitKat ! \"\n                this.state.red =\"\";\n                stopTimerStatus = 1;\n                // à faire : lancer un nouveau timer et les classes CSS\n            }\n        }\n        else if (stopTimerStatus === 1) {\n            console.log(\"timer à recommencer\");\n        }\n    }\n\n    timer() {\n        console.log(stopTimerStatus);\n            this.state.mode = \"MODE TRAVAIL : Au boulot ! \"\n            const intervalTimer = setInterval(this.compte.bind(this), 1000);\n\n    }\n\n    render() {\n        return (\n            <div style={styles}>\n                <h1>- POMODORO -</h1>\n                <div>\n                    <button onClick={this.timer.bind(this)}> Lancer un timer </button>\n                </div>\n                <p>{this.state.mode}</p>\n                <p>{this.state.red}</p>\n                <p>Timer :  {this.state.count}</p>\n            </div>\n        )\n    }\n}\n\nlet count = 1;\nlet text = \"welcome 2\";\nconst rootElt = document.getElementById(\"root\");\nrender (<Demo count={count} text={text}/>, rootElt);\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}