{"ast":null,"code":"/*import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();*/\n\n/*import React from 'react';\nimport {render} from 'react-dom';\n\nconst styles = {\n    textAlign: \"center\"\n}\n\nconst stylesAlert = {\n    backgroundColor: \"red\"\n}*/\n\n/*function Demo (props) {\n    return (\n        <div styles={styles}>\n            <h1>Aloha n {props.count}</h1>\n        </div>\n    )\n}*/\n\n/*\nclass Demo extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {count:25, mode:\"MODE PAUSE : Have break, have a KitKat ! \", red:\"\"};\n    }\n\n    compte() {\n        this.setState({count: this.state.count - 1})\n\n        if (this.state.count < 20 && this.state.count !== 0 && this.state.count > 0) {\n            console.log(\"red\");\n            this.state.red = \"Plus que 20 secondes et c'est bientôt l'heure de la pause !\";\n        }\n        else if (this.state.count <= 0) {\n            console.log('alert');\n            this.state.mode = \"MODE PAUSE : Have break, have a KitKat ! \"\n            this.state.red =\"\";\n\n            // à faire : lancer un nouveau timer et les classes CSS\n\n        }\n\n    }\n\n    timer() {\n        this.state.mode = \"MODE TRAVAIL : Au boulot ! \"\n        setInterval(this.compte.bind(this), 1000);\n    }\n\n    render() {\n        return (\n            <div style={styles}>\n                <h1>- POMODORO -</h1>\n                <div>\n                    <button onClick={this.timer.bind(this)}> Lancer un timer </button>\n                </div>\n                <p>{this.state.mode}</p>\n                <p>{this.state.red}</p>\n                <p>Timer :  {this.state.count}</p>\n            </div>\n        )\n    }\n}\n\nlet count = 1;\nlet text = \"welcome 2\";\nconst rootElt = document.getElementById(\"root\");\nrender (<Demo count={count} text={text}/>, rootElt);*/","map":{"version":3,"sources":["/Users/guydefontgalland/PhpstormProjects/pomodoro/src/index.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/*import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();*/\n\n\n\n\n/*import React from 'react';\nimport {render} from 'react-dom';\n\nconst styles = {\n    textAlign: \"center\"\n}\n\nconst stylesAlert = {\n    backgroundColor: \"red\"\n}*/\n\n/*function Demo (props) {\n    return (\n        <div styles={styles}>\n            <h1>Aloha n {props.count}</h1>\n        </div>\n    )\n}*/\n/*\nclass Demo extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {count:25, mode:\"MODE PAUSE : Have break, have a KitKat ! \", red:\"\"};\n    }\n\n    compte() {\n        this.setState({count: this.state.count - 1})\n\n        if (this.state.count < 20 && this.state.count !== 0 && this.state.count > 0) {\n            console.log(\"red\");\n            this.state.red = \"Plus que 20 secondes et c'est bientôt l'heure de la pause !\";\n        }\n        else if (this.state.count <= 0) {\n            console.log('alert');\n            this.state.mode = \"MODE PAUSE : Have break, have a KitKat ! \"\n            this.state.red =\"\";\n\n            // à faire : lancer un nouveau timer et les classes CSS\n\n        }\n\n    }\n\n    timer() {\n        this.state.mode = \"MODE TRAVAIL : Au boulot ! \"\n        setInterval(this.compte.bind(this), 1000);\n    }\n\n    render() {\n        return (\n            <div style={styles}>\n                <h1>- POMODORO -</h1>\n                <div>\n                    <button onClick={this.timer.bind(this)}> Lancer un timer </button>\n                </div>\n                <p>{this.state.mode}</p>\n                <p>{this.state.red}</p>\n                <p>Timer :  {this.state.count}</p>\n            </div>\n        )\n    }\n}\n\nlet count = 1;\nlet text = \"welcome 2\";\nconst rootElt = document.getElementById(\"root\");\nrender (<Demo count={count} text={text}/>, rootElt);*/\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}