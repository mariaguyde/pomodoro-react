{"ast":null,"code":"var _jsxFileName = \"/Users/guydefontgalland/PhpstormProjects/pomodoro/src/index.js\",\n    _s = $RefreshSig$();\n\n/*import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();*/\n\n/*import React from 'react';\nimport {render} from 'react-dom';\n\nconst styles = {\n    textAlign: \"center\"\n}\n\nconst stylesAlert = {\n    backgroundColor: \"red\"\n}*/\n\n/*function Demo (props) {\n    return (\n        <div styles={styles}>\n            <h1>Aloha n {props.count}</h1>\n        </div>\n    )\n}*/\n\n/*\nclass Demo extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {count:25, mode:\"MODE PAUSE : Have break, have a KitKat ! \", red:\"\"};\n    }\n\n    compte() {\n        this.setState({count: this.state.count - 1})\n\n        if (this.state.count < 20 && this.state.count !== 0 && this.state.count > 0) {\n            console.log(\"red\");\n            this.state.red = \"Plus que 20 secondes et c'est bientôt l'heure de la pause !\";\n        }\n        else if (this.state.count <= 0) {\n            console.log('alert');\n            this.state.mode = \"MODE PAUSE : Have break, have a KitKat ! \"\n            this.state.red =\"\";\n\n            // à faire : lancer un nouveau timer et les classes CSS\n\n        }\n\n    }\n\n    timer() {\n        this.state.mode = \"MODE TRAVAIL : Au boulot ! \"\n        setInterval(this.compte.bind(this), 1000);\n    }\n\n    render() {\n        return (\n            <div style={styles}>\n                <h1>- POMODORO -</h1>\n                <div>\n                    <button onClick={this.timer.bind(this)}> Lancer un timer </button>\n                </div>\n                <p>{this.state.mode}</p>\n                <p>{this.state.red}</p>\n                <p>Timer :  {this.state.count}</p>\n            </div>\n        )\n    }\n}\n\nlet count = 1;\nlet text = \"welcome 2\";\nconst rootElt = document.getElementById(\"root\");\nrender (<Demo count={count} text={text}/>, rootElt);*/\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [secondsLeft, setSecondsLeft] = useState(25 * 60);\n  const [timer, setTimer] = useState();\n\n  const start = () => {\n    const timer = setInterval(() => {\n      setSecondsLeft(secondsLeft => secondsLeft - 1);\n\n      if (secondsLeft === 0) {\n        clearInterval(timer);\n      }\n    }, 1000);\n    setTimer(timer);\n  };\n\n  useEffect(() => {\n    if (secondsLeft === 0) {\n      clearInterval(timer);\n    }\n  }, [secondsLeft, timer]);\n  useEffect(() => {\n    return () => clearInterval(timer);\n  }, [timer]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Pomodoro Timer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: start,\n      children: \"start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [secondsLeft, \" seconds left\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"/ig3/mOzvKRJVm9jMbSlw7Nm9M4=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/guydefontgalland/PhpstormProjects/pomodoro/src/index.js"],"names":["React","useEffect","useState","App","secondsLeft","setSecondsLeft","timer","setTimer","start","setInterval","clearInterval"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC1B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCH,QAAQ,CAAC,KAAK,EAAN,CAA9C;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,EAAlC;;AAEA,QAAMM,KAAK,GAAG,MAAM;AAChB,UAAMF,KAAK,GAAGG,WAAW,CAAC,MAAM;AAC5BJ,MAAAA,cAAc,CAAED,WAAD,IAAiBA,WAAW,GAAG,CAAhC,CAAd;;AACA,UAAIA,WAAW,KAAK,CAApB,EAAuB;AACnBM,QAAAA,aAAa,CAACJ,KAAD,CAAb;AACH;AACJ,KALwB,EAKtB,IALsB,CAAzB;AAMAC,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,GARD;;AAUAL,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIG,WAAW,KAAK,CAApB,EAAuB;AACnBM,MAAAA,aAAa,CAACJ,KAAD,CAAb;AACH;AACJ,GAJQ,EAIN,CAACF,WAAD,EAAcE,KAAd,CAJM,CAAT;AAMAL,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAO,MAAMS,aAAa,CAACJ,KAAD,CAA1B;AACH,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;AAIA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAQ,MAAA,OAAO,EAAEE,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA,iBAAMJ,WAAN;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GA/BuBD,G;;KAAAA,G","sourcesContent":["/*import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();*/\n\n\n\n\n/*import React from 'react';\nimport {render} from 'react-dom';\n\nconst styles = {\n    textAlign: \"center\"\n}\n\nconst stylesAlert = {\n    backgroundColor: \"red\"\n}*/\n\n/*function Demo (props) {\n    return (\n        <div styles={styles}>\n            <h1>Aloha n {props.count}</h1>\n        </div>\n    )\n}*/\n/*\nclass Demo extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {count:25, mode:\"MODE PAUSE : Have break, have a KitKat ! \", red:\"\"};\n    }\n\n    compte() {\n        this.setState({count: this.state.count - 1})\n\n        if (this.state.count < 20 && this.state.count !== 0 && this.state.count > 0) {\n            console.log(\"red\");\n            this.state.red = \"Plus que 20 secondes et c'est bientôt l'heure de la pause !\";\n        }\n        else if (this.state.count <= 0) {\n            console.log('alert');\n            this.state.mode = \"MODE PAUSE : Have break, have a KitKat ! \"\n            this.state.red =\"\";\n\n            // à faire : lancer un nouveau timer et les classes CSS\n\n        }\n\n    }\n\n    timer() {\n        this.state.mode = \"MODE TRAVAIL : Au boulot ! \"\n        setInterval(this.compte.bind(this), 1000);\n    }\n\n    render() {\n        return (\n            <div style={styles}>\n                <h1>- POMODORO -</h1>\n                <div>\n                    <button onClick={this.timer.bind(this)}> Lancer un timer </button>\n                </div>\n                <p>{this.state.mode}</p>\n                <p>{this.state.red}</p>\n                <p>Timer :  {this.state.count}</p>\n            </div>\n        )\n    }\n}\n\nlet count = 1;\nlet text = \"welcome 2\";\nconst rootElt = document.getElementById(\"root\");\nrender (<Demo count={count} text={text}/>, rootElt);*/\n\n\nimport React, { useEffect, useState } from \"react\";\n\nexport default function App() {\n    const [secondsLeft, setSecondsLeft] = useState(25 * 60);\n    const [timer, setTimer] = useState();\n\n    const start = () => {\n        const timer = setInterval(() => {\n            setSecondsLeft((secondsLeft) => secondsLeft - 1);\n            if (secondsLeft === 0) {\n                clearInterval(timer);\n            }\n        }, 1000);\n        setTimer(timer);\n    };\n\n    useEffect(() => {\n        if (secondsLeft === 0) {\n            clearInterval(timer);\n        }\n    }, [secondsLeft, timer]);\n\n    useEffect(() => {\n        return () => clearInterval(timer);\n    }, [timer]);\n\n    return (\n        <div className=\"App\">\n            <h1>Pomodoro Timer</h1>\n            <button onClick={start}>start</button>\n            <div>{secondsLeft} seconds left</div>\n        </div>\n    );\n}\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}